head(iris)
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
# x, y and z coordinates
x <- sep.l <- iris$Sepal.Length
y <- pet.l <- iris$Petal.Length
z <- sep.w <- iris$Sepal.Width
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
scatter3D(x, y, z, clab = c("Sepal", "Width (cm)"))
# x, y, z variables
x <- mtcars$wt
y <- mtcars$disp
z <- mtcars$mpg
# Compute the linear regression (z = ax + by + d)
fit <- lm(z ~ x + y)
# predict values on regular xy grid
grid.lines = 26
x.pred <- seq(min(x), max(x), length.out = grid.lines)
y.pred <- seq(min(y), max(y), length.out = grid.lines)
xy <- expand.grid( x = x.pred, y = y.pred)
z.pred <- matrix(predict(fit, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(fit)
# scatter plot with regression plane
scatter3D(x, y, z, pch = 18, cex = 2,
theta = 20, phi = 20, ticktype = "detailed",
xlab = "wt", ylab = "disp", zlab = "mpg",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = NA, fit = fitpoints), main = "mtcars")
# ### 3D Scatterplot ######################################################
# Nice plots without surface maps?
install.packages("scatterplot3d", dependencies = TRUE)
library(scatterplot3d)
scatterplot3d(x = data$x, y = data$y, z = data$z)
# ### 3D Scatterplot ######################################################
# Only to play around?
install.packages("rgl", dependencies = TRUE)
library(rgl)
plot3d(x = data$x, y = data$y, z = data$z)
lines3d(x = data$x, y = data$y, z = data$z)
surface3d(x = data$x, y = data$y, z = data$z)
install.packages("scatterplot3d", dependencies = TRUE)
data = data.frame(
x = rep( c(0.1, 0.2, 0.3, 0.4, 0.5), each=5),
y = rep( c(1, 2, 3, 4, 5), 5)
)
data$z = runif(
25,
min = (data$x*data$y - 0.1 * (data$x*data$y)),
max = (data$x*data$y + 0.1 * (data$x*data$y))
)
library(rgl)
plot3d(x = data$x, y = data$y, z = data$z)
lines3d(x = data$x, y = data$y, z = data$z)
surface3d(x = data$x, y = data$y, z = data$z)
library(rgl)
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
head(my_data)
tail(my_data)
my_data_male<-my_data[which(my_data$sexo=="male"),]
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ), oma = c(0,0,2.5,0))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
"\u00be"
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,color = ~sexo, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,color = ~sexo, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,color = ~sexo, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
if (!require("plotly")){install.packages("plotly",verbose = F) ; library("plotly")}
if (!require("later")){install.packages("later",verbose = F) ; library("later")}
if (!require("stats")){install.packages("stats",verbose = F) ; library("stats")}
if (!require("reshape2")){install.packages("reshape2",verbose = F) ; library("reshape2")}
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
install.packages("plot_ly",verbose = F)
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
p
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers()
p
?install.packages
if (!require("plotly")){install.packages("plotly",verbose = F) ; library("plotly")}
if (!require("later")){install.packages("later",verbose = F) ; library("later")}
if (!require("stats")){install.packages("stats",verbose = F) ; library("stats")}
if (!require("reshape2")){install.packages("reshape2",verbose = F) ; library("reshape2")}
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
#--------------------------------------------------------------------------------------------------- #
#  ____    _                    _           ____                    __   _   _
# / ___|  | |_    __ _   _ __  | |_   _    |  _ \   _ __    ___    / _| (_) | |   ___
# \___ \  | __|  / _` | | '__| | __| (_)   | |_) | | '__|  / _ \  | |_  | | | |  / _ \
#  ___) | | |_  | (_| | | |    | |_   _    |  __/  | |    | (_) | |  _| | | | | |  __/
# |____/   \__|  \__,_| |_|     \__| (_)   |_|     |_|     \___/  |_|   |_| |_|  \___|
#--------------------------------------------------------------------------------------------------- #
if (!require("plotly")){install.packages("plotly",verbose = F) ; library("plotly")}
if (!require("later")){install.packages("later",verbose = F) ; library("later")}
if (!require("stats")){install.packages("stats",verbose = F) ; library("stats")}
if (!require("reshape2")){install.packages("reshape2",verbose = F) ; library("reshape2")}
print("All packages and functions have been installed or loaded...")
#----------------------------------------------------------------------------------- #
#  _____               _         ____                    __   _   _
# | ____|  _ __     __| |  _    |  _ \   _ __    ___    / _| (_) | |   ___
# |  _|   | '_ \   / _` | (_)   | |_) | | '__|  / _ \  | |_  | | | |  / _ \
# | |___  | | | | | (_| |  _    |  __/  | |    | (_) | |  _| | | | | |  __/
# |_____| |_| |_|  \__,_| (_)   |_|     |_|     \___/  |_|   |_| |_|  \___|
#----------------------------------------------------------------------------------- #
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
my_data_male<-my_data[which(my_data$sexo=="male"),]
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ), oma = c(0,0,2.5,0))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
#Regresion lineal multiple
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers()
p
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
my_data_male<-my_data[which(my_data$sexo=="male"),]
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ), oma = c(0,0,2.5,0))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
#Regresion lineal multiple
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = 'altura',
yaxis = 'cintura',
zaxis = 'peso'))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers()
# %>%
#   layout(scene = list(xaxis = list(title = 'altura'),
#                       yaxis = list(title = 'cintura'),
#                       zaxis = list(title = 'peso')))
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
?acast
p
summary(model7)
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict.lm(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la función
}
predictorvalues(66,37.95,43,model7,13)
predictorvalues(66,37.95,43,model7,"confidence")
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers()
# %>%
#   layout(scene = list(xaxis = list(title = 'altura'),
#                       yaxis = list(title = 'cintura'),
#                       zaxis = list(title = 'peso')))
p
rm(list=ls())
rm(list=ls())
#Lectura de datos
my_data<-read.table("./data_in/peso_data.txt", header=T) #Lee los datos del archivo
head(my_data)
my_data[my_data$sexo"male"]
my_data[my_data$sexo"male",]
my_data[my_data$sexo=="male"]
my_data[my_data$sexo=="male",]
my_data_male<-my_data[which(my_data$sexo=="male"),]
#Ajustamos modelos
y<-my_data_male$peso #la variable respuesta es el Peso
x1<-my_data_male$altura #variable x1 determinada por Altura
x2<-my_data_male$cintura #variable x2 determinada por Cintura
x3<-my_data_male$cadera #variable x3 determinada por Cadera
model1<-lm(y~x1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
summary(model1)
model2<-lm(y~x2)
model3<-lm(y~x3)
summary(model1)
summary(model2)
summary(model3)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ), oma = c(0,0,2.5,0))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
?par
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ), oma = c(0,0,0,0))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
abline(model2,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=5)
#Realizamos una visualizacion
par(mfrow = c( 1, 3 ))
plot(x1,y,col=4,xlab="Altura",ylab="Peso", main="Peso vs. Altura")
abline(model1,col=2)
plot(x2,y,col=4,xlab="Cintura",ylab="Peso", main="Peso vs. Cintura")
abline(model2,col=2)
plot(x3,y,col=4,xlab="Cadera",ylab="Peso",  main="Peso vs. Cadera")
abline(model3,col=2)
title(main="Rectas de Regresi\u00f3n Lineal para cada variable explicativa",
outer=T,cex.main=2)
model4<-lm(peso~altura+cintura,data = my_data_male)
summary(model1)
summary(model2)
summary(model3)
summary(model2)
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
?lm
head(my_data_male)
lm(my_data$peso~my_data$altura+my_data$cintura)
model4<-lm(peso~altura+cintura,data = my_data_male)
model5<-lm(peso~altura+cadera,data = my_data_male)
model6<-lm(peso~cintura+cadera,data = my_data_male)
model7<-lm(peso~altura+cintura+cadera,data = my_data_male)
summary(model4)
summary(model5)
summary(model6)
summary(model7)
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
# #Hacemos un grafico en 4D para sexo masculino y femenino con las variables altura y cintura
p <- plot_ly(my_data, x = ~altura, y = ~cintura, z = ~peso ,
color = ~sexo, colors = c('red', 'blue')) %>%
add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'altura'),
yaxis = list(title = 'cintura'),
zaxis = list(title = 'peso')))
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
#Hacemos un grafico en 3D para cintura y cadera a?adiendo el plano
p <- plot_ly(my_data_male,
x = ~cintura,
y = ~cadera,
z = ~peso,
type = "scatter3d",
mode = "markers")
p
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
axis_x
axis_y
#Setup Axis
axis_x <- seq(min(my_data_male$cintura), max(my_data_male$cintura), by = graph_reso)
axis_y <- seq(min(my_data_male$cadera), max(my_data_male$cadera), by = graph_reso)
#Sample points
lm_surface <- expand.grid(cintura = axis_x,cadera = axis_y,KEEP.OUT.ATTRS = F)
lm_surface$peso <- predict(model6, newdata = lm_surface,type = "response")
lm_surface <- acast(lm_surface, cadera ~ cintura, value.var = "peso") #y ~ x
p<-  add_trace(p = p,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
p
?acast
predictorvalues<-function(x1,x2,x3,model, type){
if (is.character(type)==T){
new<-data.frame(altura=x1,cintura=x2,cadera=x3)
predict.lm(model,new,interval=type)
}
else print("Debe introducir una variable del tipo 'character', como por ejemplo \n 'confidences'") #condicionamiento de la función
}
predictorvalues(66,37.95,43,model7,"confidence")
?predict
